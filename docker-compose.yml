services:

    postgres:
      image: postgres:${POSTGRES_VERSION}
      container_name: ${POSTGRES_HOST}
      restart: always
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_PORT=${POSTGRES_PORT}
      volumes:
        - postgres_data:/var/lib/postgresql/data/
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -h ${POSTGRES_HOST}" ]
        interval: 10s
        timeout: 3s
        retries: 3
        start_period: 5s
      ports:
        - "${POSTGRES_PORT_LOCAL}:${POSTGRES_PORT}"
      networks:
        - services

    redis:
      image: redis:${REDIS_VERSION}
      container_name: ${REDIS_HOST}
      restart: always
      environment:
        - REDIS_HOST=${REDIS_HOST}
        - REDIS_PORT=${REDIS_PORT}
      healthcheck:
        test: [ "CMD-SHELL", "redis-cli", "ping" ]
        interval: 1s
        timeout: 3s
        retries: 3
        start_period: 5s
      ports:
        - "${REDIS_PORT_LOCAL}:${REDIS_PORT}"
      networks:
        - services

    migrations:
      build:
        dockerfile: ./migrations/Dockerfile
      container_name: migrations
      environment:
        - LOCAL=False
        - DEBUG=False
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_HOST_LOCAL=${POSTGRES_HOST_LOCAL}
        - POSTGRES_PORT_LOCAL=${POSTGRES_PORT_LOCAL}
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        - services

volumes:
  postgres_data:
  static:

networks:
  services:
    driver: bridge
